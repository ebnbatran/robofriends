{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardsArray","robots","map","user","key","username","Search","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2ed4b46.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?150x150`} alt='robots'/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n\tconst cardsArray = robots.map((user) => {\n\t\treturn <Card \n\t\t\t\t\t\t\tkey={user.id}\n\t\t\t\t\t\t\tid={user.id} \n\t\t\t\t\t\t\tname={user.name} \n\t\t\t\t\t\t\tusername={user.username} \n\t\t\t\t\t\t\temail={user.email} \n\t\t\t\t\t\t/>\t\t\t\t\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t{cardsArray}\t\t\n\t\t</div>\n\t);\n}\n\n\nexport default CardList;","import React from 'react';\n\n\nconst Search = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Search Robots'\n\t\t\t\tonChange={searchChange} \n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n\nexport default Search;","import React from 'react';\n\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n\n};\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component {\n\t\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tcomponentDidCatch() {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooops! Something went wrong here</h1>;\n\t\t} else {\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n\n}\n\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport Search from '../components/Search';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\tisPending: state.requestRobots.isPending,\n\t\trobots: state.requestRobots.robots,\n\t\terror: state.requestRobots.error\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t};\n};\n\n\nclass App extends Component {\n\t\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\trobots: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\n\t\treturn isPending ?\n\t\t\t<h1>Loading ...</h1> :\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<Search searchChange={onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t}\n\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n} from './constants';\n\nexport const setSearchField = text => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n\nexport const requestRobots = () => dispatch => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n} from './constants';\n\nconst initialStateSearch = {\n\tsearchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\t\tswitch (action.type) {\n\t\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\t\treturn Object.assign(\n\t\t\t\t\t{}, state, { searchField: action.payload }\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n};\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { isPending: false, robots: action.payload });\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { isPending: false, error: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}